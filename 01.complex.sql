DROP TYPE IF EXISTS COMPLEX CASCADE;

CREATE TYPE COMPLEX AS (r DOUBLE PRECISION, i DOUBLE PRECISION);

CREATE OR REPLACE FUNCTION complex(a DOUBLE PRECISION)
RETURNS complex
AS
$$
	SELECT	(a, 0)::COMPLEX;
$$
LANGUAGE 'sql'
IMMUTABLE
STRICT;

DROP CAST IF EXISTS (DOUBLE PRECISION AS COMPLEX);

CREATE CAST (DOUBLE PRECISION AS COMPLEX)
	WITH FUNCTION complex(DOUBLE PRECISION);

CREATE OR REPLACE FUNCTION complex(a INT)
RETURNS complex
AS
$$
	SELECT	a::DOUBLE PRECISION::COMPLEX;
$$
LANGUAGE 'sql'
IMMUTABLE
STRICT;

DROP CAST IF EXISTS (INT AS COMPLEX);

CREATE CAST (INT AS COMPLEX)
	WITH FUNCTION complex(INT);


CREATE OR REPLACE FUNCTION pos(a COMPLEX)
RETURNS COMPLEX
AS
$$
	SELECT	a
$$
LANGUAGE 'sql'
IMMUTABLE
STRICT;

DROP OPERATOR IF EXISTS + (NONE, complex);

CREATE OPERATOR +
	(
	RIGHTARG = complex,
	PROCEDURE = pos
	);

CREATE OR REPLACE FUNCTION neg(a COMPLEX)
RETURNS COMPLEX
AS
$$
	SELECT	(-a.r, -a.i)::COMPLEX
$$
LANGUAGE 'sql'
IMMUTABLE
STRICT;

DROP OPERATOR IF EXISTS - (NONE, complex);

CREATE OPERATOR -
	(
	RIGHTARG = complex,
	PROCEDURE = neg
	);

CREATE OR REPLACE FUNCTION add (a COMPLEX, b COMPLEX)
RETURNS COMPLEX
AS
$$
	SELECT	(a.r + b.r, a.i + b.i)::COMPLEX
$$
LANGUAGE 'sql'
IMMUTABLE
STRICT;

DROP OPERATOR IF EXISTS + (complex, complex);

CREATE OPERATOR +
	(
	LEFTARG = complex,
	RIGHTARG = complex,
	PROCEDURE = add,
	COMMUTATOR = +
	);

CREATE OR REPLACE FUNCTION mul (a COMPLEX, b COMPLEX)
RETURNS COMPLEX
AS
$$
	SELECT	(a.r * b.r - a.i * b.i, a.r * b.i + a.i * b.r)::COMPLEX
$$
LANGUAGE 'sql'
IMMUTABLE
STRICT;

DROP OPERATOR IF EXISTS * (complex, complex);

CREATE OPERATOR *
	(
	LEFTARG = complex,
	RIGHTARG = complex,
	PROCEDURE = mul,
	COMMUTATOR = *
	);

CREATE OR REPLACE FUNCTION mul (a COMPLEX, b DOUBLE PRECISION)
RETURNS COMPLEX
AS
$$
	SELECT	(a.r * b, a.i * b)::COMPLEX
$$
LANGUAGE 'sql'
IMMUTABLE
STRICT;

DROP OPERATOR IF EXISTS * (complex, DOUBLE PRECISION);

CREATE OPERATOR *
	(
	LEFTARG = complex,
	RIGHTARG = DOUBLE PRECISION,
	PROCEDURE = mul,
	COMMUTATOR = *
	);

CREATE OR REPLACE FUNCTION mul (a DOUBLE PRECISION, b COMPLEX)
RETURNS COMPLEX
AS
$$
	SELECT	b * a
$$
LANGUAGE 'sql'
IMMUTABLE
STRICT;

DROP OPERATOR IF EXISTS * (DOUBLE PRECISION, COMPLEX);

CREATE OPERATOR *
	(
	LEFTARG = DOUBLE PRECISION,
	RIGHTARG = COMPLEX,
	PROCEDURE = mul,
	COMMUTATOR = *
	);

CREATE OR REPLACE FUNCTION norm(a COMPLEX)
RETURNS DOUBLE PRECISION
AS
$$
	SELECT	a.r * a.r + a.i * a.i
$$
LANGUAGE 'sql'
IMMUTABLE
STRICT;

CREATE OR REPLACE FUNCTION magnitude(a COMPLEX)
RETURNS DOUBLE PRECISION
AS
$$
	SELECT	SQRT(norm(a))
$$
LANGUAGE 'sql'
IMMUTABLE
STRICT;

DROP OPERATOR IF EXISTS ~ (NONE, complex);

CREATE OPERATOR ~
	(
	RIGHTARG = complex,
	PROCEDURE = magnitude
	);

CREATE OR REPLACE FUNCTION conjugate(a COMPLEX)
RETURNS COMPLEX
AS
$$
	SELECT	(a.r, -a.i)::COMPLEX
$$
LANGUAGE 'sql'
IMMUTABLE
STRICT;

DROP OPERATOR IF EXISTS # (NONE, complex);

CREATE OPERATOR #
	(
	RIGHTARG = complex,
	PROCEDURE = conjugate
	);

CREATE OR REPLACE FUNCTION div (a COMPLEX, b DOUBLE PRECISION)
RETURNS COMPLEX
AS
$$
	SELECT	(a.r / b, a.i / b);
$$
LANGUAGE 'sql'
IMMUTABLE
STRICT;

DROP OPERATOR IF EXISTS / (complex, DOUBLE PRECISION);

CREATE OPERATOR /
	(
	LEFTARG = complex,
	RIGHTARG = DOUBLE PRECISION,
	PROCEDURE = div
	);

CREATE OR REPLACE FUNCTION rec (a COMPLEX)
RETURNS COMPLEX
AS
$$
	SELECT	#a / norm(a)
$$
LANGUAGE 'sql'
IMMUTABLE
STRICT;

DROP OPERATOR IF EXISTS // (NONE, COMPLEX);

CREATE OPERATOR //
	(
	RIGHTARG = COMPLEX,
	PROCEDURE = rec
	);

CREATE OR REPLACE FUNCTION div (a COMPLEX, b COMPLEX)
RETURNS COMPLEX
AS
$$
	SELECT	a * //b
$$
LANGUAGE 'sql'
IMMUTABLE
STRICT;

DROP OPERATOR IF EXISTS / (COMPLEX, COMPLEX);

CREATE OPERATOR /
	(
	LEFTARG = COMPLEX,
	RIGHTARG = COMPLEX,
	PROCEDURE = div
	);

CREATE OR REPLACE FUNCTION exp(a COMPLEX)
RETURNS COMPLEX
AS
$$
	SELECT	EXP(a.r) * (COS(a.i), SIN(a.i))::COMPLEX
$$
LANGUAGE 'sql'
IMMUTABLE
STRICT;

CREATE AGGREGATE SUM(COMPLEX)
	(
	STYPE = COMPLEX,
	SFUNC = add
	);
